<?php

namespace test\unit;

use Garcia\JWT;
use PHPUnit\Framework\TestCase;

class JWTTest extends TestCase
{
    public array $payload;
    public int $time;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->payload = [
            'user_id' => 1,
            'username ' => 'johndoe',
            'email' => 'foo@bar.com',
            'role' => 'admin'
        ];
        $this->time = time() - 3600;
    }

    public function testEncode()
    {
        $jwt = new JWT('secret');
        $token = $jwt->encode($this->payload);
        $this->assertIsString($token);
    }

    public function testDecode()
    {
        $jwt = new JWT('secret');
        $token = $jwt->encode($this->payload);
        try {
            $decoded = $jwt->decode($token);

            $this->assertIsObject($decoded);
            $this->assertEquals($this->payload, (array) $decoded);
        } catch (\Exception $e) {
            $this->assertIsObject($e);
        }
    }

    public function testEncodeWithExpiration()
    {
        $jwt = new JWT('secret');
        $token = $jwt->encode($this->payload, $this->time);
        $this->assertIsString($token);
    }

    public function testDecodeWithInvalidToken()
    {
        $jwt = new JWT('secret');
        $token = $jwt->encode($this->payload);
        $token = substr($token, 0, -1);

        try {
            $decoded = $jwt->decode($token);
            $this->assertIsObject($decoded);
        } catch (\Exception $e) {
            $this->assertIsObject($e);
        }
    }

    public function testDecodeWithExpiredToken()
    {
        $jwt = new JWT('secret');
        $token = $jwt->encode($this->payload, $this->time);

        try {
            $decoded = $jwt->decode($token);
            $this->assertIsObject($decoded);
            $this->assertEquals($this->payload, (array) $decoded);
        } catch (\Exception $e) {
            $this->assertIsObject($e);
        }
    }
}
